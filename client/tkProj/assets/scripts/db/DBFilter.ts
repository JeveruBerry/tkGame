// auto build by python scriptexport interface IDBFilter {     id: number ;     camp: number ;     num: number ;     sType: number ;     rProt: string[] ;     cProt: string[] ;     needAll: number ;}const tmpDb: {[index: string ]: IDBFilter } = {   1: {id: 1, camp: 0, num: 1, sType: 0, rProt: ["1", "2", "0"], cProt: [], needAll: 0},   2: {id: 2, camp: 0, num: 2, sType: 1, rProt: [], cProt: ["0", "1", "2"], needAll: 0},   3: {id: 3, camp: 0, num: 2, sType: 0, rProt: ["1", "2", "0"], cProt: [], needAll: 1},   4: {id: 4, camp: 0, num: 2, sType: 0, rProt: ["1", "2", "0"], cProt: [], needAll: 0},   5: {id: 5, camp: 0, num: 1, sType: 0, rProt: ["1", "2", "0"], cProt: [], needAll: 0},   6: {id: 6, camp: 0, num: 2, sType: 0, rProt: ["1", "2", "0"], cProt: [], needAll: 0},   7: {id: 7, camp: 0, num: 1, sType: 0, rProt: ["1", "2", "0"], cProt: [], needAll: 0},   8: {id: 8, camp: 0, num: 1, sType: 0, rProt: ["1", "2", "0"], cProt: [], needAll: 0},};export class DBFilter {    public static getInstance(): DBFilter {        if ( DBFilter.instance == null ) {            DBFilter.instance = new DBFilter();        }        return DBFilter.instance;    }    private static instance: DBFilter;    private readonly db: {[index: string]: IDBFilter} = null;    constructor() {        this.db = tmpDb;    }    public getDBFilterById(id: string): IDBFilter {        return this.db[id];    }    public getAllDBFilter() {        return this.db;    }}
