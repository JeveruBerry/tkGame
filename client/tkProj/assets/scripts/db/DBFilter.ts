/** * @author python2ts.py * @description auto built *  */export interface IDBFilter {     id:number,     camp:number,     num:number,     sType:number,     rProt:Array<string>,     cProt:Array<string>,     needAll:number,}let tmpDb:{[index:string]:IDBFilter} = {   "1":{id:1,camp:0,num:1,sType:0,rProt:["1","2","0"],cProt:[],needAll:0},   "2":{id:2,camp:0,num:1,sType:1,rProt:[],cProt:["0","1","2"],needAll:0},   "3":{id:3,camp:0,num:2,sType:0,rProt:["1","2","0"],cProt:[],needAll:1},   "4":{id:4,camp:0,num:2,sType:0,rProt:["1","2","0"],cProt:[],needAll:0},   "5":{id:5,camp:0,num:1,sType:0,rProt:["1","2","0"],cProt:[],needAll:0},   "6":{id:6,camp:0,num:2,sType:0,rProt:["1","2","0"],cProt:[],needAll:0},   "7":{id:7,camp:0,num:1,sType:0,rProt:["1","2","0"],cProt:[],needAll:0},   "8":{id:8,camp:0,num:1,sType:0,rProt:["1","2","0"],cProt:[],needAll:0},};export class DBFilter {    static _instance:DBFilter;    static getInstance():DBFilter{        if( DBFilter._instance == null ){            DBFilter._instance = new DBFilter();        }        return DBFilter._instance;    }    private readonly _db:{[index:string]:IDBFilter} = null;    constructor(){        this._db = tmpDb;    }    getDBFilterById(id:string):IDBFilter{        return this._db[id];    }    getAllDBFilter(){        return this._db;    }}